{"version":3,"sources":["logo.svg","store/reducers/reducer.js","store/store.js","store/actions/actionTypes.js","store/actions/actions.js","components/header/Navbar.js","components/footer/Footer.js","components/movies/MovieSummary.js","components/movies/MovieList.js","components/utils/paginationList.js","components/pagination/Pagination.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initState","activePage","data","results","sort","label","value","genres","selectedGenre","id","selectedYear","showPreloader","showError","detailsInfo","store","createStore","state","action","type","applyMiddleware","thunk","fetchData","filterWithGenre","dispatch","console","log","setGenre","renewPageData","filterWithYear","setYear","sortWithSelect","setSorting","movieListUrl","page","apiKey","genreId","getState","year","sortBy","pageId","moviesUrl","axios","get","then","response","movies","total_pages","catch","error","options","years","Navbar","selectedOption","componentDidMount","sortSelect","props","setState","selectGenre","selectYear","this","state1","i","push","className","src","logo","alt","onChange","Component","connect","genre","Footer","MovieSummary","movie","poster_path","title","vote_average","overview","directors","release_date","MovieList","map","key","paginationList","totalPages","listPages","Pagination","item","onClick","handleChange","e","target","Main","fetchGenresData","fetchInitialData","listGenres","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56bf192e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as type from '../actions/actionTypes'\n\nconst initState = {\n  activePage: 1,\n  data: {\n    results: [],\n  },\n  sort: {\n    label: null,\n    value: 'popularity.desc',\n  },\n  genres: [],\n  selectedGenre: {\n    id: null,\n    label: null,\n    value: null,\n  },\n  selectedYear: {\n    label: null,\n    value : null,\n  },\n  showPreloader: false,\n  showError: false,\n  detailsInfo: {},\n};\n\n\nexport const reducer = (state = initState, action) => {\n  switch (action.type) {\n  case type.FETCH_DATA:\n    return {\n      ...state,\n      data: action.data,\n    };\n    case type.FETCH_GENRES:\n      return {\n        ...state,\n        genres: action.data,\n      };\n    case type.SET_GENRE:\n      return {\n        ...state,\n        selectedGenre: action.data,\n      };\n    case type.SET_YEAR:\n      return {\n        ...state,\n        selectedYear: action.data,\n    };\n    case type.SET_SORTING:\n      return {\n        ...state,\n        sort: action.data,\n    };\n\n  default:\n    return {\n      ...state,\n    };\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport {reducer} from './reducers/reducer'\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nexport default store;\n","export const FETCH_DATA = 'FETCH_DATA';\nexport const FETCH_GENRES = 'FETCH_GENRES';\nexport const SET_GENRE = 'SET_GENRE';\nexport const SET_YEAR = 'SET_YEAR';\nexport const RENEW_DATA = 'RENEW_DATA';\nexport const SET_SORTING = 'SET_SORTING';\n","import axios from 'axios';\nimport * as type from './actionTypes';\nimport store from '../../store/store.js'\n\nexport const fetchData = (data) => {\n  return {\n    type: type.FETCH_DATA,\n    data,\n  };\n};\n\nexport const fetchGenres = (data) => {\n  return {\n    type: type.FETCH_GENRES,\n    data,\n  };\n};\n\nexport const setGenre = (data) => {\n  console.log(data);\n  return {\n    type: type.SET_GENRE,\n    data,\n  };\n};\n\nexport const setYear = (data) => {\n  console.log(data);\n  return {\n    type: type.SET_YEAR,\n    data: data,\n  };\n};\n\nexport const setSorting = (data) => {\n  console.log(data);\n  return {\n    type: type.SET_SORTING,\n    data: data,\n  };\n};\n\nexport const filterWithGenre = (data) => {\n  return (dispatch) => {\n    dispatch(setGenre(data));\n    dispatch(renewPageData(1));\n  };\n};\n\nexport const filterWithYear = (data) => {\n  return (dispatch) => {\n    dispatch(setYear(data));\n    console.log('filter with year action:',data);\n    dispatch(renewPageData(1));\n  };\n};\n\nexport const sortWithSelect = (data) => {\n  return (dispatch) => {\n    dispatch(setSorting(data));\n    dispatch(renewPageData(1));\n  };\n};\n\nexport const fetchInitialData = () => {\n  return (dispatch) => {\n    return axios.get(movieListUrl(1))\n      .then(response => {\n        console.log(response);\n        dispatch(fetchData({movies: response.data.results, page: response.data.page, total_pages: response.data.total_pages}))\n      })\n      .catch(error => {\n        throw(error);\n      });\n  };\n};\n\nconst movieListUrl = (page, sort_by = 'revenue.desc') => {\n  const apiKey = '&api_key=5874acfd11651a28c55771624f7021f4&language=en-EN';\n  const genreId = store.getState().selectedGenre.id !== null ? '&with_genres=' + store.getState().selectedGenre.id : '';\n  const year = store.getState().selectedYear.value !== null ? '&year=' + store.getState().selectedYear.value : '';\n  const sortBy = store.getState().sort.value !== null ? 'sort_by='+ store.getState().sort.value : ''  ;\n  const pageId = '&page=' + page;\n  let moviesUrl = 'https://api.themoviedb.org/3/discover/movie?' + sortBy + apiKey + pageId +  genreId + year;\n  return moviesUrl;\n};\n\nexport const renewPageData = (page) => {\n  return (dispatch) => {\n    return axios.get(movieListUrl(page))\n      .then(response => {\n        console.log('renew:', response);\n        dispatch(fetchData({movies: response.data.results, page: response.data.page, total_pages: response.data.total_pages}))\n      })\n      .catch(error => {\n        throw(error);\n      });\n  };\n};\n\n\nexport const fetchGenresData = () => {\n  return (dispatch) => {\n    return axios.get('https://api.themoviedb.org/3/genre/movie/list?api_key=5874acfd11651a28c55771624f7021f4&language=ru_RU')\n      .then(response => {\n        console.log('fetched genres', response);\n        const listGenres = [];\n          response.data.genres.map(item => (\n            listGenres.push({ value: item.name, label: item.name, id: item.id })\n          ));\n        dispatch(fetchGenres(listGenres));\n      })\n      .catch(error => {\n        throw(error);\n      });\n  };\n};\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport logo from '../../logo.svg'\nimport './Navbar.css'\nimport Select from 'react-select'\nimport { connect } from 'react-redux'\nimport { filterWithGenre, filterWithYear, sortWithSelect } from '../../store/actions/actions'\n\nconst options = [\n  {value: 'popularity.desc', label: 'По популярности'},\n  {value: 'vote_average.desc', label: 'По рейтингу'},\n  {value: 'revenue.desc', label: 'По кассовым сборам'},\n];\n\nconst years = [];\n\n\nclass Navbar extends Component {\n  state = {\n    selectedOption: {\n      label: 'По популярности',\n      value: 'popularity.desc',\n    },\n    selectedYear: {\n      label: 'Выбрать год',\n      value: '',\n    },\n    selectedGenre: {\n      label: 'Выбрать жанр',\n      value: '',\n    },\n\n  };\n\n  componentDidMount = () => {};\n\n  sortSelect = (selectedOption) => {\n    const {sortWithSelect} = this.props;\n    this.setState({ selectedOption: selectedOption });\n    console.log(`Option selected:`, selectedOption);\n    sortWithSelect(selectedOption);\n  };\n\n  selectGenre = (selectedGenre) => {\n    const { filterWithGenre } = this.props;\n    this.setState({ selectedGenre: selectedGenre });\n    console.log(`Genre selected:`, selectedGenre, this.state);\n    filterWithGenre( selectedGenre );\n  };\n\n\n  selectYear = (selectedYear) => {\n    const { filterWithYear } = this.props;\n    this.setState({ selectedYear: selectedYear });\n    console.log(`Year selected:`, selectedYear, this.state);\n    filterWithYear(selectedYear);\n  };\n\n\n\n  render(){\n    const { selectedOption, selectedYear, selectedGenre } = this.state;\n    const { genres, state1 } = this.props;\n    for (let i=2019; i >= 1901; i--){\n      years.push({value: i, label: i});\n    };\n    console.log('state:', state1)\n    return (\n      <div className=\"header-container\">\n        <div className=\"header-form\">\n          <div className=\"header-dropdowns\">\n            <img src={logo} className=\"logo\" alt=\"logo\" />\n            <div className=\"select-container\">\n              <span>Жанры</span>\n              <Select className=\"select\" options={genres} value={selectedGenre} onChange={this.selectGenre} />\n            </div>\n            <div className=\"select-container\">\n              <span>Год</span>\n              <Select className=\"select\" options={years} value={selectedYear} onChange={this.selectYear} />\n            </div>\n            <div className=\"select-container\">\n              <span>Сортировать</span>\n              <Select className=\"select\" options={options} value={selectedOption} onChange={this.sortSelect} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n//  data: state.data.data,\n//  activePage: state.data.activePage,\n//  year: state.data.year,\n    sort: state.sort,\n    genres: state.genres,\n//  selectedGenres: state.data.selectedGenres,\n//  showPreloader: state.data.showPreloader,\n//  showError: state.showError,\n//    movies: state.movies,\n    state1: state,\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    filterWithGenre: (genre) => dispatch (filterWithGenre(genre)),\n    filterWithYear: (year) => dispatch (filterWithYear(year)),\n    sortWithSelect: (sort) => dispatch (sortWithSelect(sort)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Footer.css'\n\nconst Footer = (props) => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        <div className=\"footer-menu\">\n          <h3>This is footer</h3>\n          <ul>\n            <li className=\"footer-item\">Email: jonsmusev@gmail.com</li>\n            <li className=\"footer-item\">LinkedIN</li>\n            <li className=\"footer-item\">Facebook</li>\n          </ul>\n        </div>\n        <div className=\"footer-menu\">\n          <ul>\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst MovieSummary = ({movie}) => {\n  return (\n    <div className=\"movie-list-item\">\n      <div className=\"movie-poster\">\n        <img src={'https://image.tmdb.org/t/p/w200'+movie.poster_path}/>\n      </div>\n      <div className='movie-info'>\n        <h3 className='movie-title'>{movie.title}</h3>\n        <ul>\n          <li className='rating-genre'>{movie.genre}</li>\n          <li className='rating-score'><h5>Средняя оценка: </h5>{movie.vote_average}</li>\n          <li className='movie-description'>{movie.overview}</li>\n          <li className='movie-directors'><h5>Directors: </h5>{movie.directors}</li>\n          <li className='movie-stars'><h5>Дата выхода: </h5>{movie.release_date}</li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default MovieSummary\n","import React from 'react'\nimport PropTypes from 'prop-types'\n//import { Link } from 'react-router-dom'\nimport MovieSummary from './MovieSummary'\n\nconst MovieList = ({movies}) => {\n  return (\n    <div className=\"movie-list\">\n      { movies && movies.map(movie => {\n        return(\n          <MovieSummary movie={movie} key={movie.id}/>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default MovieList\n","export const paginationList = (page, totalPages) => {\n  const separator = '...';\n  const listPages = [];\n\n  if (totalPages <= 10) {\n    for (let i=1; i <= totalPages; i++){\n      listPages.push(i);\n    }\n\n  } else if (page < 5) {\n    for (let i=1; i <= page; i++ ){\n      listPages.push(i);\n    }\n    listPages.push(page+1, page+2, separator, totalPages-2, totalPages-1, totalPages);\n\n  } else if (page > totalPages-4){\n    listPages.push(1, 2, separator, page-2, page-1);\n    for (let i=page; i <= totalPages; i++){\n      listPages.push(i);\n    }\n\n\n  } else {\n    listPages.push(\n      1, 2, separator,\n      page-1, page, page+1,\n      separator, totalPages-1, totalPages,\n    );\n  }\n\n  return listPages;\n}\n","import React, { Component} from 'react'\nimport PropTypes from 'prop-types'\nimport './Pagination.css'\n\nimport { paginationList } from '../utils/paginationList'\n\nclass Pagination extends Component {\n  componentDidMount(){\n  }\n\n  listPages = () => {\n    const {page, totalPages} = this.props;\n    const pagelist = paginationList(page, totalPages);\n    return pagelist.map((item, key) => {\n      console.log(item);\n      return(\n          <button\n            value={item}\n            className = {item == page ? 'active' : null}\n            onClick={item != '...' ? this.handleChange : null}\n          >\n            {item}\n          </button>\n      );\n    });\n  };\n\n  handleChange = (e) => {\n    const {renewPageData} = this.props;\n    console.log(e.target.value);\n    renewPageData(e.target.value);\n  }\n\n    render () {\n      const {page, renewPageData} = this.props;\n      return (\n        <div className='pagination'>\n          {this.listPages()}\n        </div>\n    );\n    }\n}\n\nexport default Pagination\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './Main.css'\nimport MovieList from '../movies/MovieList'\nimport Pagination from '../pagination/Pagination'\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport { fetchInitialData, fetchGenresData, renewPageData } from '../../store/actions/actions'\n\nclass Main extends Component {\n componentDidMount(){\n   const { fetchGenresData, fetchInitialData, renewPageData } = this.props;\n   fetchInitialData();\n   fetchGenresData();\n  }\n\n  render () {\n  const { movies, state1, genres, selectedGenre, page, totalPages, renewPageData } = this.props;\n  console.log(selectedGenre);\n\n    return (\n      <div className=\"main-window\">\n        <p>{selectedGenre}</p>\n        <MovieList movies={movies}/>\n        <div className=\"spinner\"/>\n        <Pagination page={page} totalPages={totalPages} renewPageData={renewPageData}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n//  data: state.data.data,\n//  activePage: state.data.activePage,\n//  year: state.data.year,\n//  sort: state.data.sort,\n    selectedGenre: state.selectedGenre.value,\n    genres: state.genres,\n    page: state.data.page,\n    totalPages: state.data.total_pages,\n//  selectedGenres: state.data.selectedGenres,\n//  showPreloader: state.data.showPreloader,\n//  showError: state.showError,\n//    movies: state.movies,\n    movies: state.data.movies,\n    state1: state,\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchInitialData: () => dispatch (fetchInitialData()),\n    fetchGenresData: () => dispatch (fetchGenresData()),\n    renewPageData: (page) => dispatch (renewPageData(page)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Navbar from './components/header/Navbar'\nimport Footer from './components/footer/Footer'\nimport Main from './components/main/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store/store'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}